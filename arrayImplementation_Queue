public class Queue_01 {
    public static class QueueArray {
        private int[] arr = new int[10];
        private int f = -1;
        private int r = -1;
        private int size = 0;
        private int n = arr.length;

        public void printFR() {
            System.out.print("\nf = " + f);
            System.out.print("\nr = " + r);
            System.out.println();
            print();
        }

        public void add(int a) {
            // empty
            if (f == -1) {
                f = r = 0;
                arr[r] = a;
                size++;
                return;
            }
            // full
            if (size == n) {
                System.out.println("Queue is full ");
                return;
            }
            size++;
            // remove after full
            if (r == n - 1) {
                r = 0;
                arr[r] = a;
                return;
            }
            // normal
            arr[++r] = a;
        }

        public int remove() {
            // empty
            if (size == 0) {
                System.out.println("Queue is empty ");
                return -1;
            }
            size--;
            // full
            if (f == n - 1) {
                int temp = arr[f];
                f = 0;
                return temp;
            }
            // normal
            int temp = arr[f++];
            return temp;
        }

        public int peek() {
            // empty
            if (size == 0) {
                System.out.println("Queue is empty ");
                return -1;
            }
            // normal
            return arr[f];
        }

        public int size() {
            return size;
        }

        public boolean isEmpty() {
            return size == 0;
        }
        public boolean isFull(){
            return n==size;
        }

        public void print() {
            // empty
            if (size == 0) {
                System.out.println("Queue is empty ");
                return;
            }
            // normal
            if (r >= f) {
                for (int i = f; i <= r; i++) {
                    System.out.print(arr[i] + " ");
                }
            }
            // remove after full
            else {
                for (int i = f; i <= n - 1; i++) {
                    System.out.print(arr[i] + " ");
                }
                for (int i = 0; i <= r; i++) {
                    System.out.print(arr[i] + " ");
                }
            }
            System.out.println();
        }

        public void printReverse() {
            // empty
            if (size == 0) {
                System.out.println("Queue is empty ");
                return;
            }
            // normal
            if (r >= f) {
                for (int i = r; i >= f; i--) {
                    System.out.print(arr[i] + " ");
                }
            }
            // remove after full
            else {
                for (int i = r; i >= 0; i--) {
                    System.out.print(arr[i] + " ");
                }
                for (int i = n - 1; i >= f; i--) {
                    System.out.print(arr[i] + " ");
                }
            }
            System.out.println();
        }

        public void reverse() {
            // empty
            if (size == 0) {
                System.out.println("Queue is empty ");
                return;
            }
            int temp;
            // normal
            if (r >= f) {
                for (int i = f, j = r; i < j; i++, j--) {
                    temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
                return;
            }
            // remove after full  r    f
            int i, j, count = 0;
            for (i = f, j = r; i <= n - 1 && j >= 0; i++, j--, count++) {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            if (count == size) {
                return;
            }
            if (i == n) {
                for (i = 0; i < j; i++, j--) {
                    temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            } else {
                for (j = n - 1; i < j; i++, j--) {
                    temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }

    public static void main(String[] args) {
        QueueArray q = new QueueArray();
        q.add(1);
        q.add(2);
        q.add(3);
        q.add(4);
        q.add(5);
        q.add(6);
        q.add(7);
        q.add(8);
        q.add(1);
        q.add(2);
        q.remove();
        q.remove();
        q.remove();
        q.remove();
//        q.remove();
//        q.remove();
//        q.remove();
//        q.remove();
//        q.remove();
        q.add(30);
//        q.add(4);
//        q.add(5);
//        q.add(6);
//        q.add(7);
//        q.add(8);
//        q.remove();
//        q.remove();
//        q.add(9);
        q.print();
        q.reverse();
        q.print();
    }
}
