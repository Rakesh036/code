/* Stack_01 "inBuilt Stack" class ka use krenge
   Stack_02 me array ka use kr Stack class bnayenge
   Stack_03 me linked list ka use kr Stack class bnayenge
   Stack_04 me interview question krenge
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
function 1: push(integer)
function 2: pop()
function 3: peek()
function 4: size()
function 5: isEmpty()
function 6: display()


___________________________________________________________________________________________________________
Question and related function of solution
___________________________________________________________________________________________________________
Que 1:  str = "(())(((()))" pta kro ki "str" balanced hai ki nhi
Sol  :





___________________________________________________________________________________________________________
                                    File:  Stack_04
___________________________________________________________________________________________________________
*/


package Stack;

import java.util.Stack;

import static Stack.Stack_01.*;

public class Stack_04 {


    public static void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static boolean isBalanced(String str) {
        Stack<Character> st = new Stack<>();
        int n = str.length();
        for (int i = 0; i < n; i++) {
            if (str.charAt(i) == '(') {
                st.push(str.charAt(i));
            } else {
                if (st.size() == 0) {
                    return false;
                }
                st.pop();
            }
        }
        if (st.size() == 0)
            return true;
        return false;
    }

    public static boolean isValid(String str) {
        Stack<Character> st = new Stack<>();
        int n = str.length();
        for (int i = 0; i < n; i++) {
            char c = str.charAt(i);
            if (c == '(' || c == '{' || c == '[') {
                st.push(c);
            } else {
                if (st.size() == 0) {
                    return false;
                } else if ((st.peek() == '(' && c == ')') || (st.peek() == '[' && c == ']') || (st.peek() == '{' && c == '}')) {
                    st.pop();
                } else {
                    return false;
                }
            }
        }
        if (st.size() == 0)
            return true;
        return false;
    }

    public static int removeToMakeBalanced(String str) {
        Stack<Character> st = new Stack<>();
        int n = 0;
        int length = str.length();
        for (int i = 0; i < length; i++) {
            if (str.charAt(i) == '(') {
                st.push(str.charAt(i));
            } else {
                if (st.size() == 0) {
                    n++;
                } else {
                    st.pop();
                }
            }
        }
        n += st.size();
        return n;
    }

    public static int[] consecutiveSubsequences(int[] arr) {
        Stack<Integer> st = new Stack<>();
        int size = arr.length;
        for (int i = 0; i < size; i++) {
            if (i == size - 1) {
                if (st.peek() == arr[i]) {
                    st.pop();
                } else {
                    st.push(arr[i]);
                }
            } else if (st.size() == 0) {
                st.push(arr[i]);
            } else if (st.peek() != arr[i]) {
                st.push(arr[i]);
            } else if (arr[i] != arr[i + 1]) {
                st.pop();
            }
        }
        int[] res = stackToArray(st);
        return res;
    }


    public static int[] nextGreaterElement(int[] arr) {
        int n = arr.length;
        int[] res = new int[n];
        Stack<Integer> st = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (st.size() > 0 && st.peek() < arr[i]) {
                st.pop();
            }
            if (st.size() == 0) {
                res[i] = -1;
                st.push(arr[i]);
            } else {
                res[i] = st.peek();
                st.push(arr[i]);
            }
        }
        return res;
    }

    public static int[] prevGreaterElement(int[] arr) {
        int n = arr.length;
        int[] res = new int[n];
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (st.size() > 0 && arr[st.peek()] < arr[i]) {
                st.pop();
            }
            if (st.size() == 0) {
                res[i] = i + 1;
                st.push(i);
            } else {
                res[i] = i - st.peek();
                st.push(i);
            }
        }
        return res;
    }

    public static int[] nextGreaterLeftToRight(int[] arr) {
        Stack<Integer> st = new Stack<>();
        int n = arr.length;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            while (st.size() > 0 && arr[st.peek()] > arr[i]) {
                st.push(i);
            }
            if (st.size() == 0) {
                st.push(i);
            } else {
                while (st.size() > 0 && arr[st.peek()] < arr[i]) {
                    res[st.peek()] = arr[i];
                    st.pop();
                }
                st.push(i);
            }
        }

        return res;
    }

    public static int[] nextSmallerElement(int arr[]) {
        Stack<Integer> st = new Stack<>();
        int n = arr.length;
        int[] nse = new int[n];
        nse[n - 1] = -1;
        st.push(arr[n - 1]);
        for (int i = n - 2; i >= 0; i--) {
            while (st.size() > 0 && st.peek() >= arr[i]) {
                st.pop();
            }
            if (st.size() == 0) {
                nse[i] = -1;
            } else {
                nse[i] = st.peek();
            }
            st.push(arr[i]);
        }
        for (int i = 0; i < n; i++) {
            System.out.print(nse[i] + "  ");
        }
        System.out.println();
        return nse;
    }


    public static int[] nextSmallerElementIndex(int arr[]) {
        Stack<Integer> st = new Stack<>();
        int n = arr.length;
        int[] nse = new int[n];
        nse[n - 1] = n;
        st.push(n - 1);
        for (int i = n - 2; i >= 0; i--) {
            while (st.size() > 0 && arr[st.peek()] >= arr[i]) {
                st.pop();
            }
            if (st.size() == 0) {
                nse[i] = n;
            } else {
                nse[i] = st.peek();
            }
            st.push(i);
        }
        for (int i = 0; i < n; i++) {
            System.out.print(nse[i] + "  ");
        }
        System.out.println();
        return nse;
    }


    public static int[] prevSmallerElementIndex(int heights[]) {
        Stack<Integer> st = new Stack<>();
        int n = heights.length;
        int[] pse = new int[n];
        pse[0] = -1;
        st.push(0);
        for (int i = 1; i < n; i++) {
            while (st.size() > 0 && heights[st.peek()] >= heights[i]) {
                st.pop();
            }
            if (st.size() == 0) {
                pse[i] = -1;
            } else {
                pse[i] = st.peek();
            }
            st.push(i);
        }
        for (int i = 0; i < n; i++) {
            System.out.print(pse[i] + "  ");
        }
        System.out.println();
        return pse;
    }

    // maximum rectangle
        public static int largestRectangleArea(int[] heights) {
            int n = heights.length;
            Stack<Integer> st = new Stack<>();
            int[] nse = new int[n];
            int[] pse = new int[n];
            // calculating nse
            nse[n-1]=n;
            st.push(n-1);
            for(int i = n - 2; i>=0;i--){
                while(st.size()>0&& heights[st.peek()]>=heights[i]){
                    st.pop();
                }
                if(st.size()==0){
                    nse[i]=n;
                }
                else{
                    nse[i]=st.peek();
                }
                st.push(i);
            }

            // emptying stack
            while(st.size()>0){
                st.pop();
            }

            // calculating pse
            pse[0]=-1;
            st.push(0);
            for(int i = 1; i<n;i++){
                while(st.size()>0&& heights[st.peek()]>=heights[i]){
                    st.pop();
                }
                if(st.size()==0){
                    pse[i]=-1;
                }
                else{
                    pse[i]=st.peek();
                }
                st.push(i);
            }

            // area

            int max = -1;
            for(int i = 0;i<n;i++){
                int curr = heights[i]*(nse[i]-pse[i]-1);
                max = Math.max(curr,max);
            }
            return max;
    }







    /*
    ___________________________________________________________________________________________________________
                                      Main function
    ___________________________________________________________________________________________________________
    */
        public static void main (String[]args){
            int[] arr = {2,1,5,6,2,3};
            System.out.println(largestRectangleArea(arr));
//        printArray(r);
        }
    }
